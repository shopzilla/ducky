<?xml version="1.0"?>
<application xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://wadl.dev.java.net/wadl20061109.xsd"
  xmlns:tns="http://www.shopzilla.com/services/catalog" xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns="http://research.sun.com/wadl/2006/10" xmlns:sz="http://www.shopzilla.com/services/catalog">
  <doc title="Publisher Catalog API"> The Catalog API gives you all the tools you need to build a rich shopping
    application.</doc>
  <grammars>
    <include href="../../../../model/src/main/xsd/service.xsd" />
  </grammars>
  <resources base="/services/catalog/v1/us/">
    <resource path="product">
      <doc title="Product Service">
        <p>The Product Service allows your application to leverage our deep catalog of products
          and offers. It returns two major types of data elements: Product and Offer. 
          A Product is an idealized, canonical representation of a real-world product.  The Product exists independent of the
          merchants who may sell it.  An Offer represents an actual item for sale by a merchant, which may or may not be aligned to a specific
          Product in our catalog. An Offer element that does not have a productId attribute is a stand-alone Offer
          with no relationship to any specific Product.
        </p>
        <p>
          Correspondingly, this service can be used for three major types of queries:
          <ul>
            <li>searching for Products and (unaligned) Offers, with or without expansion of
              the Offers aligned under each Product</li>
            <li>searching for Offers only, omitting Product data
            </li>
            <li>lookup of specific Products by identifier, with or without expansion of the
              Offers aligned under each Product</li>
          </ul>
        </p>
        <p>In addition to the product and offer data, this service also returns some additional meta data in the form of a Classification element which contains some information about
          the search quality of the keyword, and an optional list of related Attributes which can be
          used to build an attribute filter (attFilter) parameter for subsequent requests.</p>
      </doc>
      <method name="GET" id="/">
        <doc> Note that though all three of the categoryId, keyword and productId parameters are
          listed as optional, at least one of them must be specified.</doc>
        <request>
          <param name="apiKey" type="xsd:string" style="query" required="true">
            <doc>Key used to authenticate the publisher request.</doc>
          </param>
          <param name="publisherId" type="xsd:unsignedint" style="query" required="true">
            <doc>Publisher id used to track which publisher is requesting content.</doc>
          </param>
          <param name="placementId" type="xsd:unsignedint" style="query" default="1">
            <doc>Placement id is a user defined value used to track where your links are 
coming from in your Publisher reports.</doc>
          </param>
          <param name="categoryId" type="xsd:unsignedint" style="query" required="false">
            <doc>Integer value which uniquely identifies a category.  Values can be discovered through the Taxonomy Service</doc>
          </param>
          <param name="keyword" type="xsd:string" style="query" required="false">
            <doc>A keyword to use in searching for products.</doc>
          </param>
          <param name="productId" type="xsd:string" style="query" required="false">
            <doc>Unique identifier for a product. For multiple results, use a
              semicolon-separated list. When using this parameter, the categoryId, keyword and
              various results-filtering parameters (minPrice, maxPrice, attFilter, etc) will be
              ignored.  Also note that the only way to get the "longDescription" element populated
              in a Product element is to look up the product using a Shopzilla Product Id.</doc>
          </param>
          <param name="productIdType" style="query" default="SZPID">
            <doc>This parameter controls how the productId parameter is interpreted.</doc>
            <option value="SZPID">
              <doc>Shopzilla Product Id</doc>
            </option>
            <!-- commenting out until this feature is actually enabled
            <option value="UPC">
              <doc>UPC code</doc>
            </option>
            -->
            <option value="SKU">
              <doc>Stock Keeping Unit. When using this value, you must also supply a valid
                merchantId with the request.</doc>
            </option>
            <option value="MPID">
              <doc>Merchant-specific Product Id Number. When using this value, you
                must also supply a valid merchantId with the request.</doc>
            </option>
            <option value="SZOID">
              <doc>Shopzilla Offer Id</doc>
            </option>
          </param>
          <param name="merchantId" type="xsd:unsignedint" style="query" required="false">
            <doc>Limit the query results using the unique identifier for a particular merchant. Values for this 
            parameter can be discovered through the RelatedAttributes element returned when the showAttributes parameter has the value &quot;true&quot;.
            </doc>
          </param>
          <param name="minPrice" type="xsd:unsignedint" style="query" required="false">
            <doc>The minimum boundary (inclusive) of a price range to limit the results by. Must
              be used in tandem with maxPrice.  The value should be in the smallest integral unit of currency (e.g. cents in US dollars).</doc>
          </param>
          <param name="maxPrice" type="xsd:unsignedint" style="query" required="false">
            <doc>
              <doc>The maximum boundary (exclusive) of a price range to limit the results by.
                Must be used in tandem with minPrice. The value should be in the smallest integral unit of currency (e.g. cents in US dollars).</doc>
            </doc>
          </param>
          <param name="start" type="xsd:unsignedint" style="query" default="0">
            <doc>Paging start parameter for Products (or Offers if the offersOnly parameter is &quot;true&quot;)</doc>
          </param>
          <param name="results" type="xsd:unsignedint" style="query" default="10">
            <doc>Determines page size for Products element (or Offers if the offersOnly parameter is &quot;true&quot;). 
            The maximum value is 250.
            </doc>
          </param>
          <param name="startOffers" type="xsd:unsignedint" style="query" default="0">
            <doc>Paging start parameter for Offers aligned under a Product.</doc>
          </param>
          <param name="resultsOffers" type="xsd:unsignedint" style="query" default="0">
            <doc>Determines page size for for Offers aligned under a Product. Maximum value is 250, but in practice the
            average number of offers per Product is much lower than that.
            </doc>
          </param>
          <param name="sort" style="query" default="relevancy_desc">
            <doc>Controls the sort order of the results.  Note that aside from the default sort order (&quot;relevancy_desc&quot;), the sort orders are applied
            only to the current page of results.</doc>
            <option value="price_asc">
              <doc>Sort by price, ascending.</doc>
            </option>
            <option value="price_desc">
              <doc>Sort by price, descending.</doc>
            </option>
            <option value="relevancy_desc">
              <doc>Sort by relevancy of results, descending.</doc>
            </option>
          </param>
          <param name="brandId" type="xsd:unsignedint" style="query" required="false">
            <doc>Filter results based on brand. The value of this parameter must be a valid
              brand id as defined in our system.  Values for this 
            parameter can be discovered either through the RelatedAttributes element returned when the showAttributes parameter has the value &quot;true&quot;, or in more depth through the Brand Service.</doc>
          </param>
          <param name="attFilter" type="xsd:string" style="query" required="false">
            <doc>Filter results based on attributes. This parameter takes a specially formatted value, the format of which is: attrId + ':' + attrValue (+ ';' + attrId + ':' + attrValue)*. An example would be: attFilter=259:12345;402:19874. Values for this parameter can be discovered through the RelatedAttributes element returned when the showAttributes parameter has the value &quot;true&quot;.</doc>
          </param>
          <param name="showAttributes" type="xsd:boolean" style="query" default="false">
            <doc>Show a list of product attributes related to your query which you could use to further refine
              your request.</doc>
          </param>
          <param name="showProductAttributes" type="xsd:boolean" style="query" default="false">
            <doc>Used only in conjunction with the productId parameter and a productIdType of "SZPID".  Will
            display additional detailed product attributes for a single product.</doc>
          </param>
          <param name="zipCode" style="query" type="xsd:string">
            <doc>U.S. 5-digit zip code; required to see shipping costs.</doc>
          </param>
          <param name="offersOnly" type="xsd:boolean" style="query" default="false">
            <doc>Query only for offers, and omit product data.</doc>
          </param>
          <param name="biddedOnly" type="xsd:boolean" style="query" default="false">
            <doc>Query only for bidded CPC offers and products which have bidded CPC offers.</doc>
          </param>
          <param name="minRelevancyScore" type="xsd:unsignedInt" style="query" default="100">
            <doc>The minimum relevancyScore value for which you want to return results.  Should be a value from 1 to 1000.
            The relevancyScore is a measure of how relevant a keyword is to shopping.  Therefore, this parameter only applies
            to requests that include a keyword.  It applies to the request as a whole, not individual results.</doc>
          </param>
        </request>
        <response>
          <representation mediaType="application/xml" element="sz:ProductResponse" />
          <fault status="400" mediaType="text/plain"><doc>Message explaining the reason for the fault -- typically invalid input.</doc></fault> 
        </response>
      </method>
    </resource>
    <resource path="taxonomy">
      <doc title="Taxonomy Service"><p>The Taxonomy Service allows your application to search and explore our hierarchy of
        categories.</p><p>It can be used for 3 major types of queries:</p>
        <ul>
          <li>Returning the entire Taxonomy tree (use categoryId=1 or simply omit any categoryId or keyword parameter); this is an expensive operation, and it's recommended that you do this no more than once or twice per day.  The tree doesn't change often enough to warrant more frequent access.</li>
          <li>Returning a subtree of the Taxonomy tree (using a categoryId parameter).  This is useful for your own exploration of the data, but less useful for high-volume applications.  For such situations, it's recommended that you download the entire tree periodically and cache it.</li>
          <li>Searching the Taxonomy tree with a keyword parameter to find related categories.</li>
        </ul>
        </doc>
      <method name="GET" id="/">
        <request>
          <param name="apiKey" type="xsd:string" style="query" required="true">
            <doc>Key used to authenticate the publisher request.</doc>
          </param>
          <param name="publisherId" type="xsd:unsignedint" style="query" required="true">
            <doc>Publisher id used to track which publisher is requesting content.</doc>
          </param>
           <param name="placementId" type="xsd:unsignedint" style="query" default="1">
            <doc>Placement id is a user defined value used to track where your links are 
coming from in your Publisher reports.</doc>
          </param>
          <param name="categoryId" type="xsd:unsignedint" style="query" required="false">
            <doc>Integer value which uniquely identifies a category.</doc>
          </param>
          <param name="keyword" type="xsd:string" style="query" required="false">
            <doc>A product keyword to use in searching for categories.</doc>
          </param>
          <param name="ancestors" type="xsd:boolean" style="query" required="false">
            <doc>Used only in conjunction with the categoryId parameter. A "true" value will
              instruct the service to append the path from the root category to the target category.
            </doc>
          </param>
          <param name="results" type="xsd:unsignedint" style="query" default="10">
            <doc>Number of categories to display in results.  Maximum is 20.</doc>
          </param>
          <param name="sort" style="query" default="prob_desc">
            <doc>Controls the sort order of the results. Used only in conjunction with
              keyword searches.</doc>
            <option value="prob_desc">
              <doc>Sort by probability, descending.</doc>
            </option>
            <option value="name_asc">
              <doc>Sort by name, ascending.</doc>
            </option>
            <option value="name_desc">
              <doc>Sort by name, descending.</doc>
            </option>
          </param>
        </request>
        <response>
          <representation mediaType="application/xml" element="sz:TaxonomyResponse" />
          <fault status="400" mediaType="text/plain"><doc>Message explaining the reason for the fault -- typically invalid input.</doc></fault>
        </response>
      </method>
    </resource>
    <resource path="brands">
      <doc title="Brand Service"><p>The Brand Service allows your application to search and explore our available
        brands.</p></doc>
      <method name="GET" id="/">
        <doc>At least one of the parameters categoryId or keyword must be specified.</doc>
        <request>
          <param name="apiKey" type="xsd:string" style="query" required="true">
            <doc>Key used to authenticate the publisher request.</doc>
          </param>
          <param name="publisherId" type="xsd:unsignedint" style="query" required="true">
            <doc>Publisher id used to track which publisher is requesting content.</doc>
          </param>
           <param name="placementId" type="xsd:unsignedint" style="query" default="1">
            <doc>Placement id is a user defined value used to track where your links are 
coming from in your Publisher reports.</doc>
          </param>
          <param name="keyword" type="xsd:string" style="query" required="false">
            <doc>A keyword to use in searching for brands.</doc>
          </param>
          <param name="categoryId" type="xsd:unsignedint" style="query" required="false">
            <doc>Integer value which uniquely identifies a category.</doc>
          </param>
          <param name="start" type="xsd:unsignedint" style="query" default="0">
            <doc>Paging start parameter for brand results</doc>
          </param>
          <param name="results" type="xsd:unsignedint" style="query" default="10">
            <doc>Determines page size for brands element. The maximum number of brands
              that can be returned is 512.</doc>
          </param>
        </request>
        <response>
          <representation mediaType="application/xml" element="sz:BrandsResponse" />
          <fault status="400" mediaType="text/plain"><doc>Message explaining the reason for the fault -- typically invalid input.</doc></fault>
        </response>
      </method>
    </resource>
    <resource path="merchant">
      <doc title="Merchant Info Service">The Merchant Info Service allows your application to access meta data about
        our merchants.</doc>
      <method name="GET" id="/">
        <doc title=""></doc>
        <request>
          <param name="apiKey" type="xsd:string" style="query" required="true">
            <doc>Key used to authenticate the publisher request.</doc>
          </param>
          <param name="publisherId" type="xsd:unsignedint" style="query" required="true">
            <doc>Publisher id used to track which publisher is requesting content.</doc>
          </param>
           <param name="placementId" type="xsd:unsignedint" style="query" default="1">
            <doc>Placement id is a user defined value used to track where your links are 
coming from in your Publisher reports.</doc>
          </param>
          <param name="merchantId" type="xsd:string" style="query" required="true">
            <doc>Unique identifier for a merchant. Can either be the integer id that Shopzilla assigns to a merchant, or their domain name (e.g. &quot;shopzilla.com&quot;).  Can optionally be a
              comma-separated list of such ids.</doc>
          </param>
          <param name="expandDetails" type="xsd:boolean" style="query" required="false">
            <doc>Controls whether a basic or expanded view of the merchant is shown.</doc>
          </param>
        </request>
        <response>
          <representation mediaType="application/xml" element="sz:MerchantResponse" />
          <fault status="400" mediaType="text/plain"><doc>Message explaining the reason for the fault -- typically invalid input.</doc></fault>
                  <!-- fault status="400" mediaType="application/xml"
                 element="ya:Error"/ -->
        </response>
      </method>
    </resource>
  </resources>
</application>